//https://acm.timus.ru/problem.aspx?space=1&num=1521

#include <bits/stdc++.h>
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define endl '\n'
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
typedef long long int ll;
typedef tree< ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update > ordered_set;
/// cout<<*X.find_by_order(1)<<endl; // largest element till the given index
/// cout<<X.order_of_key(-5)<<endl;  // number of items in a set that are strictly smaller than our item


int main(){
    optimize();

    int n,k; cin>>n>>k;
    ordered_set ps;
    for(int i=1; i<=n; i++)ps.insert(i);

    int pos = 0;
    k--;
    while(ps.size()>0){
        pos += k;
        pos %= ps.size();
        int val = *ps.find_by_order(pos);
        cout<<val<<" ";
        ps.erase(val);
        pos = ps.order_of_key(val);
    }
    cout<<endl;
    return 0;
}
